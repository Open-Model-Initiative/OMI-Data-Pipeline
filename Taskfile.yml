# SPDX-License-Identifier: Apache-2.0
version: '3'


includes:
  api: ./modules/odr_api/Taskfile.api.yml
  core: ./modules/odr_core/Taskfile.yml
  data: ./modules/odr_datamodel/Taskfile.yml
  frontend: ./modules/odr_frontend/Taskfile.yml
  api-test: ./modules/odr_api/tests/Taskfile.api.test.yml
  monitoring: ./modules/odr_monitoring/Taskfile.yml

dotenv: ['.env', '{{.ENV}}/.env', '{{.HOME}}/.env']
vars:
  ROOT_DIR:
    sh: echo ${ROOT_DIR}
  ENV_FILE:
    sh: echo ${ROOT_DIR}/.env

tasks:
  default:
    desc: List all the tasks
    cmds:
      - task --list

  setup:
    desc: Setup the project
    cmds:
      - cmd: powershell -ExecutionPolicy ByPass -File ./scripts/setup.ps1
        platforms: [windows]
      - cmd: ./scripts/setup.sh
        platforms: [linux, darwin]
      - cmd: docker network inspect omi-network >/dev/null 2>&1 || docker network create omi-network
      - cmd: task setup-venv
      - cmd: task frontend:install-dev

  setup-venv:
    desc: Setup the virtual environment
    cmds:
      - cmd: ./scripts/setup_virt_env.sh
        platforms: [linux, darwin]
      - cmd: powershell -ExecutionPolicy ByPass -File ./scripts/setup_virt_env.ps1
        platforms: [windows]
  activate-venv:
    desc: Activate the virtual environment
    cmds:
      - cmd: source ${ROOT_DIR}/venv/bin/activate
        platforms: [linux, darwin]
      - cmd: "${ROOT_DIR}/venv/Scripts/activate"
        platforms: [windows]
  ## Macro
  start-all:
    desc: Start all services
    cmds:
      - echo "Starting all services..."
      - |
        task start-containers
        wait
      - echo "All services started"
  stop-all:
    desc: Stop all services
    cmds:
      - echo "Stopping all services..."
      - |
        task stop-containers
      - echo "All services stopped"

  test-all:
    desc: Run all tests
    cmds:
      - echo "Starting all tests ..."
      - |
        task core:test &
        task core:test-db &
        task api-test:test-all &
        task monitoring:test &
        wait
      - echo "All testing complete"

  watch-all-logs:
    desc: Watch all service logs
    cmds:
      - echo "Watching all logs..."
      - docker compose logs -f

  smoke_tests:
    desc: Run smoke tests for the API
    cmds:
      - task api-test:health-check

  build-all:
    desc: Build all services
    cmds:
      - docker compose build
  start-containers:
    desc: Start all services
    cmds:
      - docker compose up -d
  stop-containers:
    desc: Stop all running containers
    cmds:
      - docker compose down
  dev:
    desc: Start development environment with odr-api in watch mode and databases headless
    cmds:
      - docker compose up --watch --build
