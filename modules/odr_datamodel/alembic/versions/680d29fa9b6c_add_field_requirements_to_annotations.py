# SPDX-License-Identifier: Apache-2.0
"""'Add field requirements to Annotations'

Revision ID: 680d29fa9b6c
Revises: 3513a015e114
Create Date: 2024-08-18 07:24:16.419430

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "680d29fa9b6c"
down_revision: Union[str, None] = "3513a015e114"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Delete rows with null values before making columns non-nullable
    op.execute(
        "DELETE FROM annotation_ratings WHERE annotation_id IS NULL OR rating IS NULL OR rated_by_id IS NULL OR created_at IS NULL OR updated_at IS NULL"
    )
    op.execute(
        "DELETE FROM annotation_reports WHERE annotation_id IS NULL OR type IS NULL OR reported_by_id IS NULL OR created_at IS NULL OR updated_at IS NULL"
    )
    op.execute(
        "DELETE FROM annotation_sources WHERE added_by_id IS NULL OR created_at IS NULL OR updated_at IS NULL"
    )
    op.execute(
        "DELETE FROM annotations WHERE content_id IS NULL OR from_user_id IS NULL"
    )

    # Now make the columns non-nullable
    op.alter_column(
        "annotation_ratings",
        "annotation_id",
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    op.alter_column(
        "annotation_ratings", "rating", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "annotation_ratings", "rated_by_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "annotation_ratings",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "annotation_ratings",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
    )
    op.alter_column(
        "annotation_reports",
        "annotation_id",
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    op.alter_column(
        "annotation_reports", "type", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "annotation_reports",
        "reported_by_id",
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    op.alter_column(
        "annotation_reports",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "annotation_reports",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
    )
    op.alter_column(
        "annotation_sources", "added_by_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "annotation_sources",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "annotation_sources",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
    )
    op.alter_column(
        "annotations", "content_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "annotations", "from_user_id", existing_type=sa.INTEGER(), nullable=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "annotations", "from_user_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        "annotations", "content_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        "annotation_sources",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
    )
    op.alter_column(
        "annotation_sources",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "annotation_sources", "added_by_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        "annotation_reports",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
    )
    op.alter_column(
        "annotation_reports",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "annotation_reports",
        "reported_by_id",
        existing_type=sa.INTEGER(),
        nullable=True,
    )
    op.alter_column(
        "annotation_reports", "type", existing_type=sa.VARCHAR(), nullable=True
    )
    op.alter_column(
        "annotation_reports", "annotation_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        "annotation_ratings",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
    )
    op.alter_column(
        "annotation_ratings",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "annotation_ratings", "rated_by_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        "annotation_ratings", "rating", existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        "annotation_ratings", "annotation_id", existing_type=sa.INTEGER(), nullable=True
    )
    # ### end Alembic commands ###
