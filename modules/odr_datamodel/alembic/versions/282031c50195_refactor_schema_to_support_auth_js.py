"""'Refactor schema to support Auth.js'

Revision ID: 282031c50195
Revises: 266a32db1499
Create Date: 2024-09-23 12:23:25.478644

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "282031c50195"
down_revision: Union[str, None] = "266a32db1499"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "accounts",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("userId", sa.Integer(), nullable=False),
        sa.Column("type", sa.String(length=255), nullable=False),
        sa.Column("provider", sa.String(length=255), nullable=False),
        sa.Column("providerAccountId", sa.String(length=255), nullable=False),
        sa.Column("refresh_token", sa.String(), nullable=True),
        sa.Column("access_token", sa.String(), nullable=True),
        sa.Column("expires_at", sa.BigInteger(), nullable=True),
        sa.Column("id_token", sa.String(), nullable=True),
        sa.Column("scope", sa.String(), nullable=True),
        sa.Column("session_state", sa.String(), nullable=True),
        sa.Column("token_type", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "verification_token",
        sa.Column("identifier", sa.String(), nullable=False),
        sa.Column("token", sa.String(), nullable=False),
        sa.Column("expires", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("identifier", "token"),
    )
    op.create_table(
        "content_sets",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("created_by_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_content_sets_id"), "content_sets", ["id"], unique=False)
    op.create_table(
        "content_events",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("content_id", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING", "AVAILABLE", "UNAVAILABLE", "DELISTED", name="contentstatus"
            ),
            nullable=False,
        ),
        sa.Column("set_by", sa.Integer(), nullable=False),
        sa.Column("note", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["content_id"],
            ["contents.id"],
        ),
        sa.ForeignKeyConstraint(
            ["set_by"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_content_events_id"), "content_events", ["id"], unique=False
    )
    op.create_table(
        "content_reports",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("content_id", sa.Integer(), nullable=False),
        sa.Column("reporter_id", sa.Integer(), nullable=False),
        sa.Column("reason", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "status",
            sa.Enum("PENDING", "REVIEWED", "RESOLVED", name="reportstatus"),
            nullable=True,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["content_id"],
            ["contents.id"],
        ),
        sa.ForeignKeyConstraint(
            ["reporter_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_content_reports_id"), "content_reports", ["id"], unique=False
    )
    op.create_table(
        "content_set_items",
        sa.Column("content_set_id", sa.Integer(), nullable=False),
        sa.Column("content_id", sa.Integer(), nullable=False),
        sa.Column(
            "added_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["content_id"],
            ["contents.id"],
        ),
        sa.ForeignKeyConstraint(
            ["content_set_id"],
            ["content_sets.id"],
        ),
        sa.PrimaryKeyConstraint("content_set_id", "content_id"),
    )
    op.add_column(
        "annotation_reports", sa.Column("description", sa.String(), nullable=True)
    )
    op.alter_column(
        "content_sources",
        "source_metadata",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=sa.String(),
        existing_nullable=True,
    )
    op.add_column("contents", sa.Column("url", sa.PickleType(), nullable=True))
    op.alter_column(
        "embedding_engines",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
    )
    op.create_unique_constraint(
        "uq_embedding_engine_name", "embedding_engines", ["name"]
    )
    op.add_column("sessions", sa.Column("userId", sa.Integer(), nullable=False))
    op.add_column(
        "sessions", sa.Column("expires", sa.DateTime(timezone=True), nullable=False)
    )
    op.add_column(
        "sessions", sa.Column("sessionToken", sa.String(length=255), nullable=False)
    )
    op.alter_column(
        "sessions",
        "id",
        existing_type=sa.UUID(),
        type_=sa.Integer(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.drop_index("ix_sessions_id", table_name="sessions")
    op.drop_constraint("sessions_user_id_fkey", "sessions", type_="foreignkey")
    op.drop_column("sessions", "created_at")
    op.drop_column("sessions", "user_id")
    op.drop_column("sessions", "expires_at")
    op.add_column(
        "user_teams",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
    )
    op.add_column(
        "user_teams",
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
    )
    op.add_column("users", sa.Column("name", sa.String(length=255), nullable=True))
    op.add_column(
        "users", sa.Column("emailVerified", sa.DateTime(timezone=True), nullable=True)
    )
    op.add_column("users", sa.Column("image", sa.String(), nullable=True))
    op.drop_index("ix_users_email", table_name="users")
    op.drop_index("ix_users_id", table_name="users")
    op.drop_index("ix_users_username", table_name="users")
    op.drop_column("users", "username")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users", sa.Column("username", sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.create_index("ix_users_username", "users", ["username"], unique=True)
    op.create_index("ix_users_id", "users", ["id"], unique=False)
    op.create_index("ix_users_email", "users", ["email"], unique=True)
    op.drop_column("users", "image")
    op.drop_column("users", "emailVerified")
    op.drop_column("users", "name")
    op.drop_column("user_teams", "updated_at")
    op.drop_column("user_teams", "created_at")
    op.add_column(
        "sessions",
        sa.Column(
            "expires_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "sessions",
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "sessions",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.create_foreign_key(
        "sessions_user_id_fkey", "sessions", "users", ["user_id"], ["id"]
    )
    op.create_index("ix_sessions_id", "sessions", ["id"], unique=False)
    op.alter_column(
        "sessions",
        "id",
        existing_type=sa.Integer(),
        type_=sa.UUID(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.drop_column("sessions", "sessionToken")
    op.drop_column("sessions", "expires")
    op.drop_column("sessions", "userId")
    op.drop_constraint("uq_embedding_engine_name", "embedding_engines", type_="unique")
    op.alter_column(
        "embedding_engines",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
    )
    op.drop_column("contents", "url")
    op.alter_column(
        "content_sources",
        "source_metadata",
        existing_type=sa.String(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.drop_column("annotation_reports", "description")
    op.drop_table("content_set_items")
    op.drop_index(op.f("ix_content_reports_id"), table_name="content_reports")
    op.drop_table("content_reports")
    op.drop_index(op.f("ix_content_events_id"), table_name="content_events")
    op.drop_table("content_events")
    op.drop_index(op.f("ix_content_sets_id"), table_name="content_sets")
    op.drop_table("content_sets")
    op.drop_table("verification_token")
    op.drop_table("accounts")
    # ### end Alembic commands ###
